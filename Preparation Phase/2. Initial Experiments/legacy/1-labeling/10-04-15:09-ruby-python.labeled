# COMPARING Ruby to Python


For better or worse, Ruby, Python, JavaScript and so on have changed how people see programming.	OUT
Better to use Python, Ruby etc.	NO_COMP
From what I have read, PHP is just an inferior language to Python and Ruby.	NO_COMP
Although the performance of Python is worse than Java, Erlang, Haskell, and ML, it's still better than Ruby.	WORSE
And ruby is better than either perl or python.	BETTER
Are Python or Ruby better connected or easier to use?	NO_COMP
Even assuming Ruby is better than Python, it doesn't matter.	NO_COMP
- [edit] Is Perl better than PHP, Python, Ruby, etc.?	NO_COMP
C, Python or Ruby are much better designed languages.	NO_COMP
- 1.26 Is Perl better than PHP, Python, Ruby, etc.?	NO_COMP
A Python/Ruby script might work better for this....	OUT
better than C, C++, JAVA, PYTHON, PERL, RUBY, PASCAL....etc.	OUT
From this perspective, ruby has a better name than python.	BETTER
15. Python has a much better Emacs mode than Ruby.	WORSE
Although Python seems to be more popular than Ruby, I think, Ruby has better concepts.	BETTER
I know Python better than Ruby, but I still work much faster with Ruby.	BETTER
"I don't say ruby is bad, I only say python is good and it's definitely not significant worse then ruby"	NO_COMP
And personally, I find Java to be worse for reading code than Ruby or Python.	NO_COMP
Dynamic languages like Ruby, PHP and Python perform much, much worse.	NO_COMP
However, Ruby and Python have better syntax and they both enforce good programming habits by their nature, especially Python.	WORSE
But merely posting "Python is way more popular" isn't constructive toward making Ruby better.	NO_COMP
Amongst the better known dynamically typed languages are Python, Ruby, JavaScript, Erlang and Smalltalk.	OUT
For this reason alone, Python is clearly better than Ruby or Perl.	WORSE
"better javascript"s just like we need to install perl/python/ruby to	OUT
I like its roots in Ruby and Python and reading CoffeeScript feels better to me.	OUT
I'm just wondering if you guys think I would be better learning Python or Ruby.	NO_COMP
In my occasionally-humble opinion, you're better off using Perl, Python or Ruby.	NO_COMP
Both Python and Ruby are much better than Java as programmming languages.	NO_COMP
Both perform better than most other managed runtimes, such as Python, Ruby, Haskell (duh), anyway.	OUT
for json: i also think its better to just use python, ruby, perl and transform it.	OUT
I have read about the beauty of Ruby and how it's better than Python or Perl.	BETTER
I do think that Ruby is better than Python or Groovy.	WORSE
(Don't tell me about how much better Python and Ruby are than Java.	NO_COMP
But there are more better languages then this (according to me) like python, ruby.	NO_COMP
DLR-based implementations of Ruby and Python should be better suited to that purpose.	NO_COMP
Edit: I do not claim that Python has better support for Selenium than Ruby.	NO_COMP
For what tasks is Ruby better suited than say Bash, Perl, Python, or Java?	OUT
Having said that Python or Ruby may be a better compromise between expressiveness and popularity.	NO_COMP
However, this is not to say that Python/Ruby are better than PHP in all respects.	NO_COMP
Compared to VB/PHP - Python/Ruby are much, much better designed languages than PHP/VB.	NO_COMP
Even Perl/Python/Ruby apps are much better in those two aspects.	NO_COMP
@Gregg - can you please quantify how PHP, Ruby, Python are 'MUCH better' than ColdFusion?	NO_COMP
I believe Python is better for this than Ruby, but I could be wrong.	WORSE
In my occasionally humble opinion, you're better off using Perl, Python or Ruby.	NO_COMP
I find Ruby better suited for interactive usage (irb), but like wise that Python has considerably better documentation on how to use stuff - that's why I prefer Python.	WORSE
4.20PM - Wow, lots of searching and flicking through Twitter Ruby GEMs, thecoverage here is a lot worse than Python.	WORSE
... comparing Python to Ruby from those of you who have ... Ruby's documentation of its libraries is much worse.	WORSE
A good thing about Ruby is that it keeps the python-dev guys on their toes thus producing a better Python.	NO_COMP
I love Ruby, more than I love Python (which I do love...) - but I feel Python is a better choice for teaching/learning as a first language.	WORSE
I like Python better than ruby and wish rails ran on Python, which is why I was seriously taking a look at Django.	WORSE
As a ruby newb and future ruby web developer, what did you find better in terms of programming versus the usual python or PHP?	OUT
if you have no experience writing C extensions for Ruby do not say "I believe Python is better for this than Ruby".	OUT
I'm a bit of a Ruby Nuby who's been bouncing around between Python and Ruby, not entirely satisfied with either and wishing both were better.	NO_COMP
But I preferred Python over Ruby, because it had more libraries and seemed to be better documented.	WORSE
I also need to take a better look at how Ruby or Python handle this type of thing.	NO_COMP
I mean, why mess around with Ruby or Python when you can write everything in assembly, or better yet, machine!	NO_COMP
But because of their simplicity, languages such as Python and Ruby are better-suited to writing small applications.	NO_COMP
Even better, they are going to provide libraries for your favorite language: Java, GWT, Python, Ruby, PHP, and .NET.	OUT
Every day, the best programmers are moving to, faster, better constructed, more powerful languages such as python and ruby.	NO_COMP
However, the more I look at Python the more I am convinced that ruby is just better.	BETTER
I guess that's fair because the implementation might be done better in Python than it was in Ruby.	WORSE
Aptana A better option for professional Web application developers, Aptana supports HTML5, CSS3, JavaScript, Ruby, Rails, PHP and Python.	OUT
From this point of view my personal opinion is that Ruby and Python are far better than PHP.	NO_COMP
I doubt that anyÂ could be expressed better, or perhaps even as well, in Python or Ruby.	NO_COMP
before you guys start submitting ideas such as why php/ruby/python is far better than perl, remember that:	OUT
Better tell that to those working on and using Smalltalk, LISP, Prolog, Python, Ruby etc. on both environments.	OUT
For example, someone might argue that Ruby is better than Python because they were able to rewrite their web site using Ruby in half the time it took to write the original Python version.	BETTER
I love Ruby and it is in my opinion, a slightly better language than Python, but at the moment I am not half as productive in Ruby as Alex Martelli is in Python.	BETTER
An article that compares Perl and Python can be found here Although Ruby might be better as a language, there is hardly any code in Ruby that could be used for A-A-P, while there is plenty in Python.	WORSE
Arguments please, the only OO-related thing that I saw could be considered superior in Ruby 1.8 (compared to Python 2.4) is the handling of properties...	WORSE
As far as Ruby and Python are concerned, people who know both still disagree about which one is superior at language level (i.e.	NO_COMP
If they took the time to actually understand what makes Perl, Python or Ruby so superior, well, it is unlikely that they'd still be happy with PHP.	NO_COMP
But the common view seems to be that for every good tool Perl has, Ruby or Python have its own (perhaps superior) version.	NO_COMP
Hard to say, and probably quite subjective; I can easily imagine arguments that the Python situation is better and that the Ruby situation is better.	OUT
I'm not totally convinced the debugging tools for Perl, Python or PHP are substantially better than Ruby, even if they are slightly better.	BETTER
If you know you're writing a webapp but don't know python or ruby I'd lean towards RoR over Python Django - I think Rails is the stronger framework (conversely I like Python better as a language).	WORSE
I imagine the situation to be as bad as (or if not, worse) in languages like Ruby, Python, JavaScript, PHP (Packagist).	OUT
And let's be realistic - Java devs always end up running the code through a debugger anyway (and the mass refactorings come later); that's no better or worse than how it's done in Python or Ruby.	NO_COMP
At least with languages like Java, Ruby, Python etc. there are plenty of libraries (for better or worse) which beginners can both use and draw inspiration from when designing their own code.	OUT
But, if I was just learning how to become a programmer what would be better to concentrate on Java, Python Ruby or C ?	OUT
And yes, I think Ruby/Python produces better code, but in the end, any code can be made to look horrible and run slowly.	NO_COMP
Even though Ruby and Python claim to be better or cleaner than Perl they still aren't used as often in corporate settings.	NO_COMP
For longer pure programming tasks you are better off using something else (be it Python, Ruby, Java, C++, Javascript, Go, ML, Julia, or something else).	OUT
all perl, python, ruby or ghc packages) it may be better to initially do the builds in another repo, so that there is less disruption in rawhide.	OUT
And using Python, Ruby, C, C++, Java, etc., does not automatically make you a better programmer than those using one of "those other languages".	OUT
But If all us believe that python or ruby are better than PHP, we must all agree with the fact that PHP deployment is completely gracefully and painless.	NO_COMP
Don't forget, ruby and python already have perfectly good interpreters, and while I'm shooting to be better, Parrot's a bonus for them, not a necessity.	NO_COMP
I am not sure a python for science or a ruby for science day would work better than a more general one.	OUT
If Moose is what lets people writing in Python or Ruby write clear OO code faster and easier with better maintainability and decent performance, then push Moose.	OUT
If you can do Ruby, Perl, and Python plus still work on their legacy ASP/VB crap, it's all the better.	OUT
In other words, CoffeeScript is an attempt to replace JavaScript syntax with a better one based on experiences from Ruby and Python worlds.	OUT
(In other words, in my opinion, it's better to use Python than something else you're not already using, like Ruby or some other interpreted language).	WORSE
In other words, there are always scenarios where PHP/Java/C/C++/Perl and others are better languages than Ruby/Python.	NO_COMP
Also, there is a perception out there that the Ruby standard library is smaller but better organized than the Python one.	BETTER
Although I'm getting heavily downvoted, I still stand by my opinion that Python or Ruby is a better first language for people looking to get into web development.	NO_COMP
I'd go so far as to say Ruby and Python aren't either, though both are very powerful and are better suited to some tasks than Java.	NO_COMP
If they perform better than their counterparts it might make python and ruby coders able to take on more platforms and capabilities.	NO_COMP
I love the language but I'm considering getting better at python just because ruby is so slow I feel bad using it for anything serious.	WORSE
In our Nixpkgs repository Â we have support for several programming languages: perl, python, ruby, haskell, lua, ... We've merged a better support for Go.	OUT
Any sources that discuss the pros and cons of each or why it would be better to do X in Ruby rather than Python?	OUT
a sequence reserve can be simply: s.reverse etc. if you use databases: ruby database binding API is arguably better than python.	BETTER
But I would say Python and PHP and Ruby are all good choices too, even better choices from many points of view.	NO_COMP
Got a good job writing C++? Hopefully you also know some Java, or better yet some Python, Ruby or some other higher level scripting language.	OUT
From the discussion here, it sounds like you might have better success using python 3.1 for development and ruby 1.8.6 for production.	NO_COMP
For languages I think Python or Ruby are better than basic, because both of them is actually used and they are simple.	NO_COMP
For the higher level language it's even better in the Qt/KDE world, the Python, Perl and Ruby bindings are all kept up to date.	OUT
I'd been kind of hoping Apple would dump AppleScript and switch over to Ruby or (even better) Python as the official AppleEvent scripting language [1].	NO_COMP
If they chose Ruby, it's because in their mind it's better than PHP or Python, regardless of whether or not it's true.	BETTER
If your robot can be controlled using a scripting language (Python, Ruby, Perl, whatever), then I think that would be a much better choice.	OUT
If you want a high-level language, use Python or Ruby... heck, even Java (too-rigid static typing) and ObjC (no garbage collection) are better.	NO_COMP
I'm ultimately probably better off switching to Ruby/Python/Groovy at some point, but I wanted to get something working first.	OUT
(better to go with a scripting language, such as Ruby or Python ? and it avoids having to unlearn things picked up from Pascal...)	NO_COMP
But when I see Python and Ruby and Groovy I begin to think: "hmmm.. wouldn't it be just a bit better if it were more like Smalltalk".	OUT
But probably the biggest death knell for Perl has been the rise of other languages that fit their ecosystem niches better, such as PHP, Ruby, and Python.	OUT
If you are looking for something better then DLTK provides support for Ruby, Tcl and in the incubation state there are JavaScript & Python.	OUT
If Parrot cannot be better VM for Perl 5 (for any its major future revision), the same is true for Ruby, Python, etc.	OUT
If you don't have a preference, start with Python as it is easy to learn and use and if it is too slow with Python, Perl and Ruby probably won't be able to do any better.	OUT
As for learning, Javascript is good, I'd do python before ruby, mainly because the culture of python seems better in line with education: there's one good, and preferably obvious way do do things.	WORSE
Certainly connecting from C, Ruby, Perl, Python, PHP then for many use cases the Stomp version will be a little better - though it'll take a little while for the C, Python and PHP clients to show up.	OUT
Currently, it comes with a custom Theme called "Abyss" (i like red), and some syntax highlighting improvements for python and ruby (for example, function- and class names in definitions are better visible, python-decorators work now).	OUT
And yes, Ruby is another good choice, but if you need to use Ruby, Python, or Perl, it might be better to write the whole script in that language.	OUT
He starts out talking about how hyper-enthusiasts from the Java world have migrated to Ruby on Rails and winds up asking whether Ruby is really better than Python or not.	BETTER
Great products, ideas and methods have lost mind share to lesser things (not that Ruby is inferior to Python or vice versa) because they lack fluff, ribbons and glitter	NO_COMP
I also think that Node.js is a superior platform over Python or Ruby for a number of reasons, for example V8 is efficient, the Node modules are very easy to use and fast, its non-blocking and stateful, etc.	NO_COMP
(And yes, in case anybody is wondering, I do think this means sometimes POSIX is better than Carbon, and Python is better than Cocoa, or Ruby is Cocoa - it all depends on what you're trying to do).	OUT
For instance, you could make a case that Python and Ruby are better than PHP (say 20%) but I'd need a language that would be much better than PHP to be worth the considerable cost involved in switching.	NO_COMP
Amusing result for people who like bashing my favourite language... when i google for "Weird perl problem", i get back 1,880,000 results... could be bad... except that ruby (2,000,000), python (2,030,000) and php (3,490,000) seem to be doing worse.	OUT
Before making rather empty assertions about why Ruby is a hyper-fad, you may consider actually coding a nontrivial project in Ruby and then describe, with code fragments, what you dislike about Ruby and how Python, again with code fragments, is technically better, along with the basis for the comparison, of course.	OUT
For me, ofcourse its not enough that's why I also know ASP & JSP & am learning Ruby then will look at Python & maybe perhaps .NET as well!! 4) Perhaps Ruby can answer this better as to what she needs!! 5) Yes, Ruby can run on apache but the recommended server is Lighttpd.	OUT
good question, for this project I've had different opinions as to which language would be the best, so I included all 3. Some say it can be done with PHP, but it will be built better with Ruby, then some say Python would be better than Ruby and vice versa.	OUT
Although I would not generally choose to write in the Java language if I had the option to write Python (or maybe Ruby, or even Perl), XOM really does everything better than DOM.	OUT
Also, learning a high-level language with lots of abstraction capabilities (like Ruby, Python, Lisp or D) might help you program better in lower-level languages where some of the techniques might still be usable, but less obvious.	OUT
He's right, I'm simply parroting the stereotype that Perl is older than Python (or even Ruby which came into existence in the mid 90s) when I rightly know better.	OUT
I kind of like the Python language better and it seems to be more full-featured than Ruby for statistical, scientific and networking (let me know if you think this is wrong).	WORSE
Actually, i've thought a lot about taking the certification.. I'm gonna wait about a year, so that i'm fully confident about the basics (and better at ruby/php/python etc)..	OUT
Even better though, is that there's a flavor of Node.js that has syntax very similar to languages such as Ruby or Python, which both are growing very strongly in the realm of web application development/deployment/etc... Welcome CoffeeScript.	NO_COMP
I am always terribly amused when people claim that their favourite language out of the group of Perl, Python and Ruby is clearly and obviously much better than one or more of the others.	OUT
I believe many people would say they do not use some mainstream language, say, Python because they've found that Ruby, Java or Perl have some specific library supported better.	OUT
I believe this is because Ruby is better suited to those who spend a majority of their time writing code whereas Python can be learned and used more easily without such frequent use.	BETTER
I guess my question might be better phrased "why doesn't running the ruby interpreter with no input not default to interactive mode (irb) such as with the python interpreter".	OUT
I guess in the end the choice really boils down to two things - whether you like Ruby or Python better and whether you like the defaults imposed to you by Rails.	OUT
I know little about Ruby or Python except that they're object-oriented, so I don't want to compare them, but out of C++/Java, Java is the better choice.	NO_COMP
By contrast, tasks that involve complicated logic or invoke few other commands - or can call a library instead of a separate command - are better written in a general-purpose language, today typically a high-level language like Python or Ruby .	NO_COMP
As for users crying out for AJAX - well, they obviously don't, any more than they would cry out for Java or Python or Ruby... they 'cry out' for more versatile sites, which perform better.	OUT
All that being said, a better career move might be to look at something like Python or Ruby (not the J- or Iron-varieties!) in order to get a taste of some popular dynamic languages and non-managed/VM development.	NO_COMP
And on a GNU system, your chance of having the GNU objc stuff and GCC installed actually seems a bit better than writing it in Ruby or maybe even Python.	NO_COMP
Because I had a personal need to better know about my Web visitors, I wrote such Linux code first using Perl, next using C and Java, finally pushing the curiosity somehow farther, I also wrote the Ruby and Python versions.	OUT
Both options are simple and much better than installing a couple Python- and/or Ruby-scripts to fix your tree, which either end up not working or require a PHD in Math to understand.	NO_COMP
D should be written with a D mindset which should be the best ingredients extracted from all those languages D got its influences from: java, C#, python, ruby, c/c++, etc. D needs to be better.	OUT
Do you know a dynamic/scripting language like Ruby or Python, but you don't know C? Diving down just a little can make you a better programmer in your preferred language!	OUT
For example: Awk, Bash, Basic variants, C/C++, Java, Lisp variants, Lua, Pascal variants, Perl, PHP, Python, Ruby, XSLT - So the chances are better than good that the language of your choice will be OK.	OUT
I'd come to the conclusion Ruby was 'better' than most(certainly php, probably python, and javascript because is not well supported server-side), but i could not have said why as succinctly as you have.	BETTER
I like the descriptive use flag names for Ruby and Python, but wouldn't bindings_ruby, bindings_python be better names, bindings could then become a new USE_EXPAND entry, which if accepted would help in autodocumenting use flags.	OUT
Increasing common scenario Publishing a public API Allow prosumers to "mashup" your data and services into new applications Can drive revenue, brand awareness and community Rest is simpler, better support in other languages, Ruby, Python etc	OUT
And since these languages will eventually start out with fully-functional libraries (better than most languages will ever get, in fact: everything Perl has to provide, and possibly Python and Ruby later), they will be usable.	OUT
Beta 1 : support for multiple Ruby versions, support for Python WSGI, multithreading ( an Enterprise only feature ), evented core similar to Nginx and Node.js, real-time response buffering, improved zero-copy architecture, better error diagnostics.	OUT
could conceivably get you fired these days when it has been clearly established that for many tasks, PHP - or Python, or Ruby, and so on - is likely to be a better choice.	OUT
If the answer is 'no', and your web application is fairly straight forward, you may be better suited with selecting a simpler language like PHP, Python or Ruby on Rails.	NO_COMP
I have no experience with Ruby, so I'm not going to talk about it either way, but I think Python is a much better choice to teach programming to "newbies" then Perl.	OUT
I'll advocate Perl, others will point out PHP is most commonly used, Ruby has a single obvious choice for frameworks, or Python is a better choice for unknown reasons.	OUT
IMO, a language like Python (IronPython or Jython if the host system is .NET or Java) or Ruby (IronRuby, JRuby) is better for basing your DSL on than Java or C#.	NO_COMP
A further advantage of perl or python (or ruby) would be that these should all have libraries for interfacing with matlab, and much better data structures than bash for tables.	NO_COMP
(And even in a language without built-in support for tainting, there are usually much better ways, such as subtyping (Python, Ruby, Smalltalk, ...), annotations/attributes (Java, C#, ...), metadata (Clojure, ...) and static typing (Haskell, ML, ...).)	OUT
And recently I've attended a Python class where, when being presented with advanced hacks in that language, I kept thinking to myself that this is cool, but even better in Ruby.	WORSE
Developers are going to stick with what is proven to work better, such as Java, Python, Perl, Php and Ruby, and ignore boondoggles like .Net and half-implementations of boondoggles like Mono.	OUT
I'd go so far as to claim that Python(or Ruby)-with-Fortran is a better tool for most jobs than C#-for-everything, which is kinda mediocre at all tasks..	OUT
If we focus purely on the tier-one languages shown in red, high-level languages (Python [#27], Ruby [#34]) lean toward better expressiveness while lower-level languages (C [#50], C++ [#45], Java [#44]) tend toward wordiness."	OUT
I know Swift isn't exactly meant to be used to write your classic stdin to stdout scripts, and that Python, Ruby, Perl, bash, awk, and friends are much better in this area, but I'd still like to see ...	OUT
I look at it as another python or ruby community that's just WAY bigger and-for better or worse-not as tied down to the standards and aggregate preferences of people who have been programming since the early 90's or before.	OUT
I guess the point of this long winded post is that in regards to python marketing/evangelizing, especially as it relates to the rise in popularity of RoR/ruby and ajax when it comes to db web apps, python would be in a lot better position if it ironed out the portability issues in the underlying web and db apis.	OUT
All of the features (and more) of Ruby in a language that is quite a bit more mature, better acceptance in the world of business, and is generally a lot faster- often due to use of more modern VM technologies than "scripting" languages like Ruby, Perl, or Python generally use.	OUT
At the recent Google I/O conference in one of the sessions, someone asked why Python and not Ruby and Guido responded witha bogus red herring stating that Ruby is essentially Rails (which is fully a bunch of crap and he should know better)!	WORSE
After years of both OO, as much RM as I could get through SQL, and functional programming through Lisp, I feel that OO is the inferior abstraction framework, especially as implemented in Java and C++ (and Ruby and Python don't give me any special reason to re-embrace OO, though I appreciate their functional aspects).	OUT
A few years ago I had a series of blog posts asking people to describe their actual pain points for Java, Ruby, C#, and Python, and I realized that it might help me explain ScalaTest better if I could gain a better idea of what people actually find painful using JUnit today.	OUT
I can wax lyrical about the technical superiority of languages like Self, Smalltalk and Lisp as compared to lesser languages like Java and C# (and even Ruby and Python), but this doesn't matter a jot if people just aren't 'comfortable' with these supposedly 'superior' languages.	OUT
I consider Java to be a much superior language (and I'm glad I leapfrogged having to deal with C++!) and also give high marks to various declarative programming languages such as Prolog , Mercury , Haskell , etc. and to scripting languages such as Python , Ruby , Lua , etc.	OUT
However over the course of the past year I've monitored the progress of 4 (frankly mediocre) developers picking up Scala 2.8 from scratch, and their Scala code is no worse than the other languages they use on a daily basis: Python, Ruby, PHP.	NO_COMP
Certainly Java and C# are an even worse choice than VB; since they're mediocre compromises of c-like languages with a subset of OO layered on top (but not as much as ruby/lisp/smalltalk); and are far more cumbersome than VB or Python.	OUT
Anyone who's used Ruby or another dynamic language (I suppose Python is good, but I can't stand the syntax and whitespace-nazism) and started to really grok it and what you can do with a dynamic language with a friendly syntax generally feels a resistance from deep down in their soul-area when they have to go back to Java-land or worse.	NO_COMP
But I think for me the above problems mean that I would have to stick with Perl5 as long as possible, or I would have to lear another language, which would have worse (or smaller) libraries than Perl has (Ruby), or which has even more annoying syntax (Python, the No-oneliners-please language).	OUT
Apart from the fact that languages such as Python, Ruby, Haskell do have very powerful functional programming support for like 10-15 years - and IMHO better one than C# or LINQ - all this goes back to Lisp , which will be celebrating 50th anniversary next year.	NO_COMP
As far as I know Parrot is a register based virtual machine and should be especially suited for _dynamic_ languages like Perl, Python, Ruby, ... Time will tell if the theoretic advantages here will result in a better real-world performance as the other VMs.	OUT
EI: A lot of people say that Erlang is great for the back-end part of a system but that it's better to use Ruby (via Rails,Merb, etc) or Python (via a number of frameworks) to build the UI, because Erlang is not good at string manipulation, makes simple methods where a loop would be handy more complicated than necessary, etc.	NO_COMP
Even "rebel" languages like PHP and Perl have realized that it's unproductive not to follow standards (Perl+Python+Ruby are defining the Parrot VM so they can share code between languages; PHP 5.0 is modeling itself after Java so that it can integrate better with J2EE.).	OUT
I know that Sun's SunStudio compiler suite now provides a variety of language 'bindings' (for want of a better term) -- if we could have documentation on how to migrate those bindings, and (more importantly) how to create our own (eg for c, c++, python, perl, ruby, lisp etc etc) then that would be a big win for the community.	OUT
In each chapter, as the author is speaking from experience on a particular project, rather than writing a chapter for a hypothetical "Better Programming in Language XYZ", you will see code snippets in C#, MSIL, Python, Ruby, and several other languages (There's even one chapter with Emacs Lisp!).	OUT
Back in the days several years ago PHP was admitted the best tool for web job but since then both Python and Ruby have matured and grown robust libraries and frameworks around them that make them better candidates for many web projects now.	NO_COMP
But, I also want to touch one of python, ruby, php, whichever is not receiving too much criticism (for the right reasons) and has potential for growth (by growth i mean language becoming better and more popular, and not scope for career growth).	OUT
Hello Jefferson, Tuesday, November 11, 2008, 4:12:40 PM, you wrote: may be i doesn't understand something but why c#, java, delphi, visual basic, perl, python, ruby or even ml better than c++? symbol names in C++ are easily predictable with wrapper using extern "C".	OUT
If not, it will probably be better to start with Java first and then if you find the time also learn a language like Python or Ruby (doesn't really matter which) since they are both great if you want to get some things done like prototyping etc.	OUT
I know a bunch of people here will disagree with me, but having started pretty much the same way as you (nearly two decades ago), I'd say you'd be much better off tackling a higher level language like Perl, Python, or Ruby first.	OUT
I'm not really sure that's all that true: even if Python frameworks caught up with where Rails was, there are lots of Ruby frameworks -- inspired by people hitting places where Rails wasn't ideal -- that are better than Rails for lots of things (including Merb, which is mer	BETTER
And at this point, Python (or Ruby) may be a better choice, because Hackage still lags behind PyPI in many areas (and say, how many days you need to teach a novice to manipulate an image, or to plot charts in Haskell?).	NO_COMP
Buffer overflow attacks are decreasing as organizations have done a better job at fixing those issues and frameworks like .NET, Java, Ruby and Python mitigate the risk - yet the same SQL threats that have existed for the past decade still exist.	OUT
Fowler: But Microsoft has done a really great job of allowing people to run PHP, Ruby, Python, and even Java on Azure, and they're trying to make it a lot better for people to move over to the Windows Azure platform.	OUT
Doing even simple tasks in C will take you through all kinds of odd little detours, every single one of which will teach you something that will make you a better programmer, and help you understand the benefits (and failure modes) of higher-level languages like Python, Ruby and Lua.	OUT
I'm currently having debate with myself as I've been slowly but surely getting some simple tasks delegated to me that I feel would be better written in one language (Python) than the languages my company normally supports (a mixture of C#, Java, Ruby, and some VB).	WORSE
All of the innovative languages (e.g., Scala) are going to come from the dictator model, and we can only hope they innovate enough to be picked up by a commercial entity, whereas they stop evolving quickly but get better tool support/documentation/etc...(as is happening with Python, to some extent Ruby).	OUT
But if those queries had been implemented procedurally using a key/value or pile-of-files database, it may have well been the case that a high-level scripting language such as Tcl, Python, or Ruby may have worked out better than C.	OUT
By learning the functional style of programming and a lot about how programming languages work, students will get a chance to develop a few practical skills, which we hope will pay off in helping them to be better programmers all around, whether in Java, Python, Ruby, Scala, Clojure, or Ada.	OUT
Guys, seriously, the cadence worked for Ruby on Rails, and the silly reference might have worked for Python on Planes if they went through with it, but you're going to have to come up with a better name than Snails on Methamphetamine if you ever want to make COBOL a "cool" programming language.	OUT
However, learning how to solve simple (and not so simple) problems using Java (or Python, or PHP, or Ruby, or C#, or ...) may well make you more productive, and puts you in a better position to appreciate what is, and is not, achievable.	OUT
I agree that new programmers should eventually learn what is going on closer to the metal, wrt memory, stack, heap, pointers, etc. I'd argue thats better learned with C then Java, but only after at least a year of a higher level language like Ruby or Python.	OUT
I had great hopes for it, it had the makings of a better lisp than python or ruby, it had macros if you really needed them, it was deeply OO, it had equivalent infix and prefix syntaxes, it even had native compilers and the potential for C++ level performance.	NO_COMP
I have not digged into the code yet, so, I can not say much more, however I believe python is better because we can use swig to call some existing c functions(I am not sure whether there a similar bridge between Ruby and c++).	WORSE
2006-08-10 .NET and Java to get better dynamic language support: Â Microsoft and Sun Microsystems are committed to bringing dynamic language support to their development platforms, a move that could popularize Python and Ruby on .NET and the JVM...Â  Ars Technica Â [ rm ]	OUT
All that said, my go-to framework these days is also Django (partly because I think Python is a better language than either Ruby or PHP, partly because the automatically generated admin interface is pretty useful, and partly because I think the WSGI , which Django speaks, is a Good Thing).	WORSE
And, wonderful as CPAN is, think how much better it will be if you can take existing Python and Ruby code and integrate it into your Perl6 project without even thinking about it, with a simple use Whatever :py; (or whatever it ends up being).	OUT
As the post above stated (which you clearly did not read, because you know better) this issue actually affects multiple application platforms to varying degrees (PHP, Java, ASP.NET, v8, Python and Ruby) so unless your proposed Apache solution is to just serve static content - and your business won't thank you for that - then it probably won't help at all.	OUT
Had it been PHP/MySQL/JS and a pair of certificates, everything would work hunkydory on pretty much any browser you could ever imagine, and better still have an API whereby anyone could write their own custom tools in Python, Ruby, Perl, VB, and still access the same data.	OUT
In actual fact, the name of this post should be "Why Lasso 9 is better than PHP, Python, Perl, Ruby, Coldfusion, Java, ASP, Lisp, Scheme, Tcl, Smalltalk, BASIC, C, C#, C++ and all other languages combined - including Lasso 8 - for building websites and web applications."	OUT
A better error message spares the need for the newbie D programmer to know what the linker is doing (eventually to program in D seriously you need to know why the linker is working, but asking such knowledge from day zero is not wise, especially because some future D programmer may come from JavaScript, Python, Ruby, Java, etc where there is no experience about linkers).	OUT
drupal community it is better to learn from other communites, many trends start in java or ruby or python or other , rupal is symfony and wiht this we'd take a look at how drupal compares to some other cms open source and proprietary along a number of dimensions, not meant to be an exaustive comparison, or even that thse are a scientifficall, just a point of discussion.	OUT
I am passionate about developing software, and I am always trying to better myself, both by looking for software which can help me; by studying computer science and software engineering litterature [hacker's litterature?], about anything from Haskell type-system wizardry to parallel programming with Linda tuple-spaces, or large-scale web-site deployments using Python, Perl or Ruby; and by practicing my craft, by rewriting software I come into contact with, doing the occasional code kata, or doing exercises anywhere I find them.	OUT
I hear you saying, "No I don't want to be the first GC language to solve this problem especially as Java, .Net, Python, Ruby, et al. just pretend it does not exist or is unimportant for practical programming and besides, it is difficult to solve and I have lots of other, better things to do, and finally few people will know or give me credit for it anyway."	OUT
But there is a better choice which is implement it in Java and in C. If you implement it in C everyone of this scripting languages typically is written either on top of the JVM or on top of C. So with the C stack we have integrated it now to PHP, to Perl, and just released the alpha for the Ruby release, and next it will be Python and probably Erlang at some point, because all of these things are written in C.	OUT
